project(
  'ghidra', 'cpp',
  default_options: [
    'werror=false',
    'warning_level=1',
    'buildtype=debug',
    'c_std=c11',
    'cpp_std=c++11',
    'optimization=g',
    'b_ndebug=if-release',
  ]
)

# FIXME: Create a wrap-environment as fallback!
if get_option('generate_parsers')
  yacc = find_program('yacc', required : true)
  flex = find_program('flex', required : true)
endif

source_base = [
                # 'xml.cc',                                # generated by yacc task
                'marshal.cc',
                'space.cc',
                'float.cc',
                'address.cc',
                'pcoderaw.cc',
                'translate.cc',
                'opcodes.cc',
                'globalcontext.cc',
  ]

source_base_yacc = [
  'xml',
  ]

source_decompiler = [
        'capability.cc',
        'architecture.cc',
        'options.cc',
        'graph.cc',
        'cover.cc',
        'block.cc',
        'cast.cc',
        'typeop.cc',
        'database.cc',
        'cpool.cc',
        'comment.cc',
        'fspec.cc',
        'action.cc',
        'loadimage.cc',
        # 'grammar.cc ',    # doesn't seem to be used
        'varnode.cc',
        'op.cc',
        'type.cc',
        'variable.cc',
        'varmap.cc',
        'jumptable.cc',
        'emulate.cc',
        'emulateutil.cc',
        'flow.cc',
        'userop.cc',
        'funcdata.cc',
        'funcdata_block.cc',
        'funcdata_varnode.cc',
        'unionresolve.cc',
        'funcdata_op.cc',
        'pcodeinject.cc',
        'heritage.cc',
        'prefersplit.cc',
        'rangeutil.cc',
        'ruleaction.cc',
        'subflow.cc',
        'blockaction.cc',
        'merge.cc',
        'double.cc',
        'coreaction.cc',
        'condexe.cc',
        'override.cc',
        'dynamic.cc',
        'crc32.cc',
        'prettyprint.cc',
        'printlanguage.cc',
        'printc.cc',
        'printjava.cc',
        'memstate.cc',
        'opbehavior.cc',
        'paramid.cc',
        'transform.cc',
        'string_ghidra.cc',
        'stringmanage.cc',
        # 'callgraph.cc',                  # uncomment for debug
        # 'ifacedecomp.cc',                # uncomment for debug
        # 'ifaceterm.cc',                  # uncomment for debug
        # 'interface.cc',                  # uncomment for debug
  ]

source_libdecomp = ['libdecomp.cc',]

source_ghidra = [
                'ghidra_process.cc',
                'ghidra_arch.cc',
                'loadimage_ghidra.cc',
                'typegrp_ghidra.cc',
                'database_ghidra.cc',
                'ghidra_context.cc',
                'cpool_ghidra.cc',
                'comment_ghidra.cc',
                'inject_ghidra.cc',
                'ghidra_translate.cc',
  ]

source_sleigh = [
                'sleigh_arch.cc',
                'sleigh.cc',
                'inject_sleigh.cc',
                'filemanage.cc',
                'semantics.cc',
                'slghsymbol.cc',
                'context.cc',
                'sleighbase.cc',
                'slghpatexpress.cc',
                'slghpattern.cc',
                'pcodecompile.cc',
  ]

source_sleigh_yacc = [
                'pcodeparse',
                'grammar',
  ]

source_console = [
                'consolemain.cc',
                'interface.cc',
                'ifacedecomp.cc',
                'testfunction.cc',
                'ifaceterm.cc',
                'callgraph.cc',
                'raw_arch.cc',
  ]

source_sleigh_compiler = [
                'slgh_compile.cc',
                'slgh_compile.hh',
  ]

source_sleigh_compiler_yacc = [
                'slghparse',
  ]

source_sleigh_compiler_flex = [
                'slghscan',
  ]

source_dir = join_paths('Ghidra', 'Features', 'Decompiler', 'src', 'decompile', 'cpp')


ghidra_source_base = []
ghidra_source_decompiler = []
libs_list = {}
exec_list = {}

target_list = {
    # binary-name : [ source-list, yacc-list, flex-list, is-library, library-deps-key-list ]
    'ghidra_base': [source_base, source_base_yacc, [], true, []],
    'ghidra_decompiler': [source_decompiler, [], [], true, ['ghidra_base']],
    'ghidra_sleigh': [source_sleigh, source_sleigh_yacc, [], true, ['ghidra_base']],
    'ghidra_libdecomp': [source_libdecomp, [], [], true, ['ghidra_decompiler', 'ghidra_sleigh']],
    'sleighc': [source_sleigh_compiler, source_sleigh_compiler_yacc,
      source_sleigh_compiler_flex, false, ['ghidra_sleigh']],
  }

if get_option('build-decompile-executable')
  target_list += {
    'decompile': [source_ghidra, [], [], false, ['ghidra_decompiler']],
  }
endif

if get_option('build-decompile-cli-executable')
  target_list += {
    'decompile_cli': [source_console, [], [], false, ['ghidra_libdecomp']],
  }
endif

foreach name,src : target_list
  source_list = []
  foreach p : src[0]
    source_list += [join_paths(source_dir, p)]
  endforeach
  if get_option('generate_parsers')
    yacc_flags = []
    foreach p : src[1]
      source_list += [ custom_target(p,
        input: join_paths(source_dir, '@0@.y'.format(p)),
        output: '@0@.cpp'.format(p),
        command: [yacc, '@INPUT@', '-o', '@OUTPUT@' ] + yacc_flags) ]
    endforeach
    foreach p : src[2]
      source_list += [ custom_target(p,
        input: join_paths(source_dir, '@0@.l'.format(p)),
        output: '@0@.cpp'.format(p),
        command: [flex, '-o', '@OUTPUT@', '@INPUT@' ]) ]
    endforeach
  endif

  lib_deps = []
  foreach l : src[4]
    lib_deps += declare_dependency(link_with: libs_list[l])
  endforeach

  if src[3]
    libs_list += {
      name : static_library(name, source_list, include_directories: source_dir, pic: true,
        dependencies: lib_deps),
      }
  else
    exec_list += {
      name : executable(name, source_list, include_directories: source_dir, pie: true,
        dependencies: lib_deps),
      }
  endif
endforeach

sla_files = []

if get_option('build-slaspecs')
  sleigh_base = join_paths(meson.current_build_dir(), 'sleigh')
  # Generated with:
  # for p in $(ls -1 ../ghidra/ghidra/Ghidra/Processors/); do cd "$STARTDIR/../ghidra/ghidra/Ghidra/Processors/$p"; echo -n "      ['$p', [" ; for i in $(find -name "*.slaspec"); do echo -n "'$(basename -s .slaspec $i)', "; done ; echo "]],"  ; done ; cd "$STARTDIR"
  foreach p : [
      ['6502', ['65c02', '6502', ]],
      ['68000', ['68020', 'coldfire', '68030', '68040', ]],
      ['8048', ['8048', ]],
      ['8051', ['80390', '8051', 'mx51', '80251', ]],
      ['8085', ['8085', ]],
      ['AARCH64', ['AARCH64BE', 'AARCH64_AppleSilicon', 'AARCH64', ]],
      ['ARM', ['ARM4t_le', 'ARM8_be', 'ARM5t_be', 'ARM4_le', 'ARM5t_le', 'ARM5_be', 'ARM8_le', 'ARM7_be', 'ARM4_be', 'ARM6_be', 'ARM5_le', 'ARM4t_be', 'ARM7_le', 'ARM6_le', ]],
      ['Atmel', ['avr8', 'avr8e', 'avr32a', 'avr8eind', 'avr8xmega', ]],
      ['BPF', ['BPF_le', ]],
      ['CP1600', ['CP1600', ]],
      ['CR16', ['CR16C', 'CR16B', ]],
      ['Dalvik', ['Dalvik_DEX_Oreo', 'Dalvik_DEX_Android12', 'Dalvik_DEX_KitKat', 'Dalvik_DEX_Marshmallow', 'Dalvik_ODEX_KitKat', 'Dalvik_DEX_Nougat', 'Dalvik_DEX_Pie', 'Dalvik_DEX_Lollipop', 'Dalvik_Base', 'Dalvik_DEX_Android10', 'Dalvik_DEX_Android11', ]],
      ['DATA', ['data-le-64', 'data-be-64', ]],
      ['eBPF', ['eBPF_le', ]],
      ['HCS08', ['HC08', 'HC05', 'HCS08', ]],
      ['HCS12', ['HCS12X', 'HC12', 'HCS12', ]],
      ['JVM', ['JVM', ]],
      ['M8C', ['m8c', ]],
      ['MC6800', ['6809', '6805', 'H6309', ]],
      ['MCS96', ['MCS96', ]],
      ['MIPS', ['mips64le', 'mips64be', 'mips32R6le', 'mips32R6be', 'mips32be', 'mips32le', ]],
      ['PA-RISC', ['pa-risc32be', ]],
      ['PIC', ['pic16f', 'dsPIC33C', 'dsPIC30F', 'PIC24H', 'PIC24F', 'dsPIC33E', 'PIC24E', 'pic17c7xx', 'dsPIC33F', 'pic16', 'pic16c5x', 'pic18', 'pic12c5xx', ]],
      ['PowerPC', ['ppc_64_isa_le', 'ppc_64_isa_vle_be', 'ppc_32_e500_le', 'ppc_32_quicciii_le', 'ppc_64_be', 'ppc_32_4xx_be', 'ppc_64_isa_altivec_be', 'ppc_64_isa_altivec_vle_be', 'ppc_64_isa_altivec_le', 'ppc_32_4xx_le', 'ppc_32_be', 'ppc_32_e500_be', 'ppc_64_isa_be', 'ppc_32_le', 'ppc_32_quicciii_be', 'ppc_64_le', ]],
      ['RISCV', ['riscv.lp64d', 'riscv.ilp32d', ]],
      ['Sparc', ['SparcV9_64', 'SparcV9_32', ]],
      ['SuperH', ['sh-2', 'sh-1', 'sh-2a', ]],
      ['SuperH4', ['SuperH4_be', 'SuperH4_le', ]],
      ['TI_MSP430', ['TI_MSP430', 'TI_MSP430X', ]],
      ['Toy', ['toy64_be_harvard', 'toy_le', 'toy_be_posStack', 'toy64_le', 'toy_builder_le_align2', 'toy_builder_le', 'toy_wsz_be', 'toy_builder_be_align2', 'toy_wsz_le', 'toy64_be', 'toy_be', 'toy_builder_be', ]],
      ['tricore', ['tricore', ]],
      ['V850', ['V850', ]],
      ['x86', ['x86-64', 'x86', ]],
      ['Z80', ['z180', 'z80', ]],
    ]
    foreach s : p[1]
      sla_spec = join_paths('Ghidra', 'Processors', p[0], 'data',
        'languages', '@0@.slaspec'.format(s))
      sla_files += [ custom_target('@0@_@1@'.format(p[0], s),
        input: sla_spec,
        #output: join_paths(sleigh_base, '@0@.sla'.format(s)),
        output: '@0@.sla'.format(s),
        command: [exec_list['sleighc'], '@INPUT@', '@OUTPUT@'],
        install: true,
        install_dir: join_paths(get_option('libdir'), 'rizin', 'plugins', 'rz_ghidra_sleigh'),
        )]
    endforeach
  endforeach

  # Generated with:
  # for p in $(ls -1 ../ghidra/ghidra/Ghidra/Processors/); do cd "$STARTDIR/../ghidra/ghidra/Ghidra/Processors/$p"; echo -n "    ['$p', [" ; for i in $(find -name "*.cspec" -o -name "*.ldefs" -o -name "*.pspec"); do echo -n "'$(basename  $i)', "; done ; echo "]],"  ; done ; cd "$STARTDIR"
  foreach p :[
    ['6502', ['6502.ldefs', '6502.pspec', '6502.cspec', ]],
    ['68000', ['68000.pspec', '68000.cspec', '68000.ldefs', '68000_register.cspec', ]],
    ['8048', ['8048.ldefs', '8048.cspec', '8048.pspec', ]],
    ['8051', ['80251.cspec', '8051_archimedes.cspec', '80390.cspec', '8051.pspec', 'mx51.cspec', 'mx51.pspec', '80251.pspec', '8051.cspec', '8051.ldefs', ]],
    ['8085', ['8085.pspec', '8085.cspec', '8085.ldefs', ]],
    ['AARCH64', ['AARCH64_win.cspec', 'AppleSilicon.ldefs', 'AARCH64.ldefs', 'AARCH64.cspec', 'AARCH64_ilp32.cspec', 'AARCH64.pspec', ]],
    ['ARM', ['ARM.ldefs', 'ARMt.pspec', 'ARMtTHUMB.pspec', 'ARMt_v6.pspec', 'ARMCortex.pspec', 'ARM_win.cspec', 'ARMt_v45.pspec', 'ARM_v45.pspec', 'ARM.cspec', 'ARM_v45.cspec', ]],
    ['Atmel', ['avr8.ldefs', 'atmega256.pspec', 'avr8xmega.pspec', 'avr32a.pspec', 'avr8imgCraftV8.cspec', 'avr8gcc.cspec', 'avr8iarV1.cspec', 'avr8.pspec', 'avr32a.cspec', 'avr8egcc.cspec', 'avr32a.ldefs', ]],
    ['BPF', ['BPF.cspec', 'BPF.pspec', 'BPF.ldefs', ]],
    ['CP1600', ['CP1600.ldefs', 'CP1600.cspec', 'CP1600.pspec', ]],
    ['CR16', ['CR16.pspec', 'CR16.ldefs', 'CR16.cspec', ]],
    ['Dalvik', ['Dalvik_Base.pspec', 'Dalvik.ldefs', 'Dalvik_Base.cspec', ]],
    ['DATA', ['data-ptr64.cspec', 'data.pspec', 'data-ptr32.cspec', 'data.ldefs', 'data-ptr16.cspec', ]],
    ['eBPF', ['eBPF.ldefs', 'eBPF.pspec', 'eBPF.cspec', ]],
    ['HCS08', ['HC08.ldefs', 'HCS08.ldefs', 'HC08.pspec', 'HC05.ldefs', 'HCS08-MC9S08GB60.pspec', 'HC08-MC68HC908QY4.pspec', 'HCS08.pspec', 'HCS08.cspec', 'HC05-M68HC05TB.pspec', 'HC05.pspec', ]],
    ['HCS12', ['HCS12X.pspec', 'HCS12.cspec', 'HCS12X.cspec', 'HC12.pspec', 'HCS12.ldefs', 'HCS12.pspec', 'HC12.cspec', ]],
    ['JVM', ['JVM.ldefs', 'JVM.pspec', 'JVM.cspec', ]],
    ['M8C', ['m8c.ldefs', 'm8c.cspec', 'm8c.pspec', ]],
    ['MC6800', ['6809.pspec', '6805.cspec', '6805.pspec', '6809.cspec', '6800.ldefs', '6805.ldefs', ]],
    ['MCS96', ['MCS96.cspec', 'MCS96.ldefs', 'MCS96.pspec', ]],
    ['MIPS', ['mips32_fp64.cspec', 'mips32be.cspec', 'mips64.pspec', 'mips64_32_n32.cspec', 'mips32micro.pspec', 'mips32.pspec', 'mips32le_eabi.cspec', 'mips32le.cspec', 'mips64_32_o64.cspec', 'mips64.cspec', 'mips64micro.pspec', 'mips.ldefs', 'mips64_32_o32.cspec', 'mips32R6.pspec', 'mips32be_eabi.cspec', 'mips64R6.pspec', ]],
    ['PA-RISC', ['pa-risc.ldefs', 'pa-risc32.pspec', 'pa-risc32.cspec', ]],
    ['PIC', ['pic16c5x.pspec', 'pic12c5xx.pspec', 'PIC24.cspec', 'PIC24.pspec', 'pic17c7xx.cspec', 'pic17c7xx.pspec', 'pic16.pspec', 'pic16.ldefs', 'pic12c5xx.ldefs', 'pic17c7xx.ldefs', 'pic16f.cspec', 'pic16c5x.ldefs', 'pic16f.pspec', 'pic18.pspec', 'pic18.ldefs', 'pic12c5xx.cspec', 'pic18.cspec', 'pic16.cspec', 'pic16c5x.cspec', 'PIC24.ldefs', ]],
    ['PowerPC', ['ppc_32_e500_le.cspec', 'ppc_32_e500_be.cspec', 'ppc.ldefs', 'ppc_64_32.cspec', 'ppc_64.cspec', 'ppc_32_le.cspec', 'ppc_32_mpc8270.pspec', 'ppc_64.pspec', 'ppc_32.pspec', 'ppc_32_be_Mac.cspec', 'ppc_64_be_Mac.cspec', 'ppc_32_be.cspec', ]],
    ['RISCV', ['RV64G.pspec', 'riscv32.cspec', 'RV32G.pspec', 'riscv64-fp.cspec', 'RV32I.pspec', 'riscv32-fp.cspec', 'RV64GC.pspec', 'riscv64.cspec', 'riscv.ldefs', 'RV64IC.pspec', 'RV32IMC.pspec', 'RV32GC.pspec', 'RV64I.pspec', 'RV32IC.pspec', ]],
    ['Sparc', ['SparcV9.ldefs', 'SparcV9_32.cspec', 'SparcV9_64.cspec', 'SparcV9.pspec', ]],
    ['SuperH', ['superh.ldefs', 'superh.cspec', 'superh.pspec', 'superh2a.cspec', ]],
    ['SuperH4', ['SuperH4.pspec', 'SuperH4.ldefs', 'SuperH4_be.cspec', 'SuperH4_le.cspec', ]],
    ['TI_MSP430', ['TI_MSP430.pspec', 'TI_MSP430X.cspec', 'TI_MSP430.ldefs', 'TI_MSP430.cspec', ]],
    ['Toy', ['toyPosStack.cspec', 'toy.cspec', 'toy64.cspec', 'toyPosStack.cspec', 'toy.ldefs', 'toy.pspec', 'toy64-long8.cspec', 'toy.cspec', 'toy64.cspec', 'toy_harvard.pspec', ]],
    ['tricore', ['tc176x.pspec', 'tricore.ldefs', 'tricore.pspec', 'tc29x.pspec', 'tricore.cspec', 'tc172x.pspec', ]],
    ['V850', ['V850.cspec', 'V850.ldefs', 'V850.pspec', ]],
    ['x86', ['x86-64-win.cspec', 'x86-64.pspec', 'x86-16.cspec', 'x86-32-golang.cspec', 'x86.pspec', 'x86borland.cspec', 'x86-64-compat32.pspec', 'x86-64-gcc.cspec', 'x86-16-real.pspec', 'x86-64-golang.cspec', 'x86.ldefs', 'x86win.cspec', 'x86gcc.cspec', 'x86-16.pspec', 'x86delphi.cspec', ]],
    ['Z80', ['z8401x.pspec', 'z8401x.pspec', 'z80.ldefs', 'z180.pspec', 'z80.cspec', 'z182.pspec', 'z80.pspec', ]],
    ]
    foreach s : p[1]
      indef = join_paths('Ghidra', 'Processors', p[0], 'data',
        'languages', s)
      sla_files += [ configure_file(
        copy: true,
        input: indef,
        #output: join_paths(sleigh_base, '@0@.sla'.format(s)),
        output: s,
        #command: [exec_list['sleighc'], '@INPUT@', '@OUTPUT@'],
        install: true,
        install_dir: join_paths(get_option('libdir'), 'rizin', 'plugins', 'rz_ghidra_sleigh'),
        )]
    endforeach
  endforeach
endif

ghidra_libdecomp_dep = declare_dependency(
  link_with: libs_list['ghidra_libdecomp'],
  include_directories: [source_dir],
  )

#ghidra_dep = declare_dependency(
#  link_with: libs_list,
#  extra_files: sla_files,
#  )


